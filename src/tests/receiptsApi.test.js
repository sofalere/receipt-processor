import { jest }  from '@jest/globals';
import httpMocks from 'node-mocks-http';

import addReceipt from '../controllers/receipts.js';
import PointCalculator from '../utils/calculatePoints';
import getPoints from '../controllers/points.js';

const mockData = [
  {
    "retailer": "Target",
    "purchaseDate": "2022-01-01",
    "purchaseTime": "13:01",
    "items": [
      { "shortDescription": "Mountain Dew 12PK", "price": "6.49" },
      { "shortDescription": "Emils Cheese Pizza", "price": "12.25" },
      { "shortDescription": "Knorr Creamy Chicken","price": "1.26" },
      { "shortDescription": "Doritos Nacho Cheese", "price": "3.35" },
      { "shortDescription": "   Klarbrunn 12-PK 12 FL OZ  ", "price": "12.00" }
    ],
    "total": "35.35"
  },
  {
    "retailer": "M&M Corner Market",
    "purchaseDate": "2022-03-20",
    "purchaseTime": "14:33",
    "items": [
      { "shortDescription": "Gatorade", "price": "2.25" },
      { "shortDescription": "Gatorade", "price": "2.25" },
      { "shortDescription": "Gatorade", "price": "2.25" },
      { "shortDescription": "Gatorade", "price": "2.25" }
    ],
    "total": "9.00"
  },
];
test('should return an id generated by nano', async () => {
  const payload = mockData[0]

  const req = httpMocks.createRequest({
    method: 'POST',
    url: '/receipts/process',
    body: payload
  });
  const res = httpMocks.createResponse();
  await addReceipt(req, res);
  const responseData = res._getJSONData();

  expect(responseData).toHaveProperty('id');
  expect(typeof responseData.id).toBe('string');
  expect(responseData.id.length).toBeGreaterThan(0);
});

test('should generate correct points for examples provided', async () => {
  const results = []
  mockData.forEach((receipt) => {
    results.push(new PointCalculator().calculatePoints(receipt))
  })

  expect(results[0]).toBe(28);
  expect(results[1]).toBe(109);
});

test('should return points of associated receipt when reqeusted using id', async () => {
  const payload = mockData[0]

  const reqToAdd = httpMocks.createRequest({
    method: 'POST',
    url: '/receipts/process',
    body: payload
  });
  const resFromAdd = httpMocks.createResponse();
  await addReceipt(reqToAdd, resFromAdd);
  const addResponseData = resFromAdd._getJSONData();

  const reqToGet = httpMocks.createRequest({
    method: 'GET',
    url: `/receipts/${addResponseData.id}/points`,
    params: {
      id: addResponseData.id
    }
  });
  const resFromGet = httpMocks.createResponse();
  await getPoints(reqToGet, resFromGet);
  const getResponseData = resFromGet._getJSONData();

  expect(getResponseData.points).toBe(28);
});